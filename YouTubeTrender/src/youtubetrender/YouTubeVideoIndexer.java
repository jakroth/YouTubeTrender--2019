/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package youtubetrender;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Scanner;
import java.util.regex.*;

/**
 * This class provides methods to index the words used in YouTube video titles
 * and descriptions. It also stores a HashMap of WordItem java objects.
 *
 * @author Joel Pillar-Rogers
 */
public class YouTubeVideoIndexer {

    /**
     * A hashmap to hold all of the YouTubeWordItems generated by the indexing
     * of this class.
     */
    HashMap<String, YouTubeWordItem> wordHash = new HashMap();
    /**
     * An arraylist to take sorted YouTubeWordItems, with the object references
     * copied from the hashmap.
     */
    ArrayList<YouTubeWordItem> wordList;
    /**
     * A YouTubeWordItem that holds the most used word in the ArrayList.
     */
    YouTubeWordItem mostUsedWord = new YouTubeWordItem("ArrayList not yet sorted. Please run the getSortedWordItems method and try again.");

    /**
     * Creates a HashMap of words associated with WordItems by indexing the
     * YouTubeVideos in a YouTubeDataParser
     *
     * @param ytParser is a YouTubeDataParser object containing YouTubeVideo
     * objects.
     */
    public void index(YouTubeDataParser ytParser) {
        // Declare method variables
        /**
         * A string that concatenates the Title and Description of each
         * YouTubeVideo in the parser object.
         */
        String wordString;
        /**
         * A long variable to mark the start time of this method.
         */
        long startTime;
        /**
         * A long variable to mark the end time of this method.
         */
        long stopTime;
        /**
         * A long variable to calculate total time taken by this method.
         */
        long runTime;

        startTime = System.nanoTime();

        // Loops through each YouTubeVideo in the specified YouTubeDataParser 
        for (int i = 0; i < ytParser.size(); i++) {
            wordString = ytParser.getVideo(i).getTitle() + " " + ytParser.getVideo(i).getDescription();
            Scanner s = new Scanner(wordString);

            // Checks if individual words in the YouTubeVideo title or description are already in the hashmap
            // Increments by 1 if they are, or adds them if they're not
            while (s.hasNext()) {
                /**
                 * A string to temporarily hold each word taken from the Title +
                 * Description wordString.
                 */
                String word = s.next();
                word = word.trim();
                word = word.toLowerCase();
                String pattern = "[^a-z]+";
                Pattern p = Pattern.compile(pattern);
                Matcher m = p.matcher(word);
                word = m.replaceAll("");

                if (word.length() == 0) {
                } else if (wordHash.containsKey(word)) {
                    wordHash.get(word).addCount(1);
                    wordHash.get(word).addPost(ytParser.getVideo(i));

                } else {
                    wordHash.put(word, new YouTubeWordItem(word));
                    wordHash.get(word).addPost(ytParser.getVideo(i));
                }
            }
        }

        // Calculate and print the time taken for this task
        stopTime = System.nanoTime();
        runTime = stopTime - startTime;
        System.out.println("------Indexing complete!------");
        System.out.println("Index Run Time (ms): " + runTime / 1000000);
        System.out.println("");
    }

    /**
     * Creates an ArrayList from the HashMap and sorts it using the WordItem
     * compareTo method. Also assigns the mostUsedWord.
     *
     * @return an ArrayList of sorted YouTubeWordItems.
     * @throws YouTubeDataParserException
     */
    public ArrayList<YouTubeWordItem> getSortedWordItems() throws YouTubeDataParserException {
        // Declare variables to monitor the run time of the sort
        /**
         * A long variable to mark the start time of this method.
         */
        long startTime;
        /**
         * A long variable to mark the end time of this method.
         */
        long stopTime;
        /**
         * A long variable to calculate total time taken by this method.
         */
        long runTime;
        startTime = System.nanoTime();

        try {
            wordList = new ArrayList(wordHash.values());
            Collections.sort(wordList);
            mostUsedWord = wordList.get(0);
        } catch (IndexOutOfBoundsException ioobe) {
            throw new YouTubeDataParserException("There are no WordItems in this HashMap");
        }
        stopTime = System.nanoTime();
        runTime = stopTime - startTime;
        System.out.println("------Sorting complete!------");
        System.out.println("Sorting Run Time (ms): " + runTime / 1000000);
        System.out.println("");
        return wordList;
    }

    /**
     * Prints the WordItems in the sorted ArrayList.
     */
    public void printSortedWordItems() {
        try {
            getSortedWordItems();
        } catch (YouTubeDataParserException ytdpe) {
            System.out.println(ytdpe.getMessage());
        }
        System.out.println("----Sorted Word Items----");
        System.out.println("[word, occurrence count, associated video count]");
        for (int i = 0; i < wordList.size(); i++) {
            System.out.println(wordList.get(i));
        }
        System.out.println("");
    }

    /**
     * Returns the YouTubeWordItem associated with the specified word string.
     *
     * @param word specifies the YouTubeWordItem to be retrieved from the
     * hashmap.
     * @return a YouTubeWordItem.
     */
    public YouTubeWordItem getWordItem(String word) {
        return wordHash.get(word);
    }

    /**
     * Prints the YouTubeWordItem associated with the specified word string,
     * using the default toString of WordItem.
     *
     * @param word specifies the YouTubeWordItem to be retrieved from the
     * hashmap.
     */
    public void printWordItem(String word) {
        if (wordHash.get(word) == null) {
            throw new NullPointerException();
        } else {
            System.out.println("[word,occurence,associated videos]");
            System.out.println(wordHash.get(word));
            System.out.println("");
        }
    }

    /**
     * Returns the YouTubeWordItem containing the most frequently parsed word in
     * the hashmap.
     *
     * @return a YouTubeWordItem.
     */
    public YouTubeWordItem getMostUsedWord() {
        return mostUsedWord;
    }

    /**
     * Returns a count of the unique words parsed.
     *
     * @return an int.
     * @throws IndexOutOfBoundsException when there are no words in the hashmap.
     */
    public int countUniqueWords() throws IndexOutOfBoundsException {
        int count = wordHash.size();
        return count;
    }
}
