/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package youtubetrender;

import java.io.File;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.*;

/**
 *
 * @author lewi0146, expanded by Joel Pillar-Rogers
 */
public class YouTubeTrenderFrame extends JFrame {

    DefaultListModel<YouTubeVideo> model = new DefaultListModel<>();
    DefaultListModel<YouTubeWordItem> trendModel = new DefaultListModel<>();
    YouTubeDataParser ytParser;
    YouTubeVideoIndexer ytIndexer;
    ArrayList<YouTubeVideo> list;
    Set<YouTubeVideo> vidSet;
    List<YouTubeWordItem> trendList;
    boolean modelOp = false;

    /**
     * Creates new form YouTubeTrenderFrame
     */
    public YouTubeTrenderFrame() {
        initComponents();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupSort = new ButtonGroup();
        jFileChooser = new JFileChooser();
        jTextFieldDataFile = new JTextField();
        jButtonParse = new JButton();
        jPanel1 = new JPanel();
        jLabel1 = new JLabel();
        jTextFieldChannel = new JTextField();
        jLabel2 = new JLabel();
        jTextFieldDate = new JTextField();
        jLabel3 = new JLabel();
        jTextFieldTitle = new JTextField();
        jLabel4 = new JLabel();
        jScrollPane2 = new JScrollPane();
        jTextAreaDescription = new JTextArea();
        jLabel5 = new JLabel();
        jTextFieldViewCount = new JTextField();
        jLabel6 = new JLabel();
        jTextFieldLikeCount = new JTextField();
        jLabel7 = new JLabel();
        jTextFieldCommentCount = new JTextField();
        jLabel8 = new JLabel();
        jTextFieldLikeRatio = new JTextField();
        jLabel9 = new JLabel();
        jTextFieldDislikeCount = new JTextField();
        jPanel2 = new JPanel();
        jScrollPane1 = new JScrollPane();
        jListVideo = new JList();
        jPanel3 = new JPanel();
        jRadioButtonChannel = new JRadioButton();
        jRadioButtonDate = new JRadioButton();
        jRadioButtonViews = new JRadioButton();
        jRadioButtonDescription = new JRadioButton();
        jRadioButtonTitle = new JRadioButton();
        jRadioButtonLikes = new JRadioButton();
        jRadioButtonComments = new JRadioButton();
        jRadioButtonLikeRatio = new JRadioButton();
        jPanel4 = new JPanel();
        jScrollPane3 = new JScrollPane();
        jListTrending = new JList();
        jButtonIndex = new JButton();
        jButtonBrowse = new JButton();

        jFileChooser.setApproveButtonToolTipText("");
        jFileChooser.setCurrentDirectory(new File("."));
        jFileChooser.setDialogTitle("");
        jFileChooser.setFileFilter(new jsonFileFilter());

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        jTextFieldDataFile.setText("youtubedata_15_50.json");
        jTextFieldDataFile.setToolTipText("the name of the json file to parse");

        jButtonParse.setMnemonic('p');
        jButtonParse.setText("Parse");
        jButtonParse.setToolTipText("parse the selected json file");
        jButtonParse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonParseActionPerformed(evt);
            }
        });

        jPanel1.setBorder(BorderFactory.createTitledBorder("Video Details"));

        jLabel1.setText("Channel");

        jTextFieldChannel.setEditable(false);
        jTextFieldChannel.setToolTipText("displays the channel of the selected video");

        jLabel2.setText("Date Posted");

        jTextFieldDate.setEditable(false);
        jTextFieldDate.setToolTipText("displays the date uploaded of the selected video");

        jLabel3.setText("Title");

        jTextFieldTitle.setEditable(false);
        jTextFieldTitle.setToolTipText("displays the title of the selected video");

        jLabel4.setText("Description");

        jTextAreaDescription.setEditable(false);
        jTextAreaDescription.setColumns(20);
        jTextAreaDescription.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        jTextAreaDescription.setLineWrap(true);
        jTextAreaDescription.setRows(5);
        jTextAreaDescription.setWrapStyleWord(true);
        jScrollPane2.setViewportView(jTextAreaDescription);

        jLabel5.setText("Views");

        jTextFieldViewCount.setEditable(false);
        jTextFieldViewCount.setToolTipText("displays the view count of the selected video");

        jLabel6.setText("Likes");

        jTextFieldLikeCount.setEditable(false);
        jTextFieldLikeCount.setToolTipText("displays the like count of the selected video");

        jLabel7.setText("Comments");

        jTextFieldCommentCount.setEditable(false);
        jTextFieldCommentCount.setToolTipText("displays the comment count of the selected video");

        jLabel8.setText("Like Ratio");

        jTextFieldLikeRatio.setEditable(false);
        jTextFieldLikeRatio.setToolTipText("displays the like-to-dislike ratio of the selected video");

        jLabel9.setText("Dislikes");

        jTextFieldDislikeCount.setEditable(false);
        jTextFieldDislikeCount.setToolTipText("displays the dislike count of the selected video");

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(57, 57, 57)
                        .addComponent(jTextFieldTitle))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel7))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jTextFieldDate, GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                                            .addComponent(jTextFieldViewCount)
                                            .addComponent(jTextFieldCommentCount))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel8, GroupLayout.PREFERRED_SIZE, 46, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jTextFieldLikeRatio, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addComponent(jLabel9)
                                                        .addGap(12, 12, 12))
                                                    .addComponent(jLabel6, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 46, GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                    .addComponent(jTextFieldDislikeCount, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jTextFieldLikeCount, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE)))))
                                    .addComponent(jTextFieldChannel)))
                            .addComponent(jLabel4))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jTextFieldTitle, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jTextFieldChannel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(jTextFieldDate, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(jTextFieldViewCount, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7, GroupLayout.PREFERRED_SIZE, 20, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldCommentCount, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextFieldLikeCount, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6, GroupLayout.PREFERRED_SIZE, 20, GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jTextFieldDislikeCount, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jTextFieldLikeRatio, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))))
                .addGap(23, 23, 23)
                .addComponent(jLabel4, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 105, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.setBorder(BorderFactory.createTitledBorder("Videos"));

        jListVideo.setToolTipText("displays all the videos in the json file that include the indexed word (if selected)");
        jListVideo.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListVideoValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jListVideo);

        GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBorder(BorderFactory.createTitledBorder("Sort Criteria"));

        buttonGroupSort.add(jRadioButtonChannel);
        jRadioButtonChannel.setMnemonic('c');
        jRadioButtonChannel.setText("Channel");
        jRadioButtonChannel.setToolTipText("sort by channel title");
        jRadioButtonChannel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonChannelActionPerformed(evt);
            }
        });

        buttonGroupSort.add(jRadioButtonDate);
        jRadioButtonDate.setMnemonic('d');
        jRadioButtonDate.setText("Date");
        jRadioButtonDate.setToolTipText("sort by date");
        jRadioButtonDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonDateActionPerformed(evt);
            }
        });

        buttonGroupSort.add(jRadioButtonViews);
        jRadioButtonViews.setMnemonic('v');
        jRadioButtonViews.setText("Views");
        jRadioButtonViews.setToolTipText("sort by view count");
        jRadioButtonViews.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonViewsActionPerformed(evt);
            }
        });

        buttonGroupSort.add(jRadioButtonDescription);
        jRadioButtonDescription.setMnemonic('e');
        jRadioButtonDescription.setText("Description");
        jRadioButtonDescription.setToolTipText("sort by description length");
        jRadioButtonDescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonDescriptionActionPerformed(evt);
            }
        });

        buttonGroupSort.add(jRadioButtonTitle);
        jRadioButtonTitle.setMnemonic('t');
        jRadioButtonTitle.setText("Title");
        jRadioButtonTitle.setToolTipText("sort by video title");
        jRadioButtonTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonTitleActionPerformed(evt);
            }
        });

        buttonGroupSort.add(jRadioButtonLikes);
        jRadioButtonLikes.setMnemonic('l');
        jRadioButtonLikes.setText("Likes");
        jRadioButtonLikes.setToolTipText("sort by like count");
        jRadioButtonLikes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonLikesActionPerformed(evt);
            }
        });

        buttonGroupSort.add(jRadioButtonComments);
        jRadioButtonComments.setMnemonic('m');
        jRadioButtonComments.setText("Comments");
        jRadioButtonComments.setToolTipText("sort by comment count");
        jRadioButtonComments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonCommentsActionPerformed(evt);
            }
        });

        buttonGroupSort.add(jRadioButtonLikeRatio);
        jRadioButtonLikeRatio.setMnemonic('r');
        jRadioButtonLikeRatio.setText("LikeRatio");
        jRadioButtonLikeRatio.setToolTipText("sort by like-to-dislike ratio");
        jRadioButtonLikeRatio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonLikeRatioActionPerformed(evt);
            }
        });

        GroupLayout jPanel3Layout = new GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonViews)
                    .addComponent(jRadioButtonTitle))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonDate)
                    .addComponent(jRadioButtonLikes))
                .addGap(2, 2, 2)
                .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonDescription)
                    .addComponent(jRadioButtonComments))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonLikeRatio)
                    .addComponent(jRadioButtonChannel))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButtonDescription)
                    .addComponent(jRadioButtonDate)
                    .addComponent(jRadioButtonTitle)
                    .addComponent(jRadioButtonChannel))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButtonViews)
                    .addComponent(jRadioButtonLikes)
                    .addComponent(jRadioButtonLikeRatio)
                    .addComponent(jRadioButtonComments))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(BorderFactory.createTitledBorder("Trending"));
        jPanel4.setToolTipText("[word,occurence,videos]");

        jListTrending.setToolTipText("displays the unique words from the title and description of all videos in the selected json file");
        jListTrending.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListTrendingValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(jListTrending);

        GroupLayout jPanel4Layout = new GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, GroupLayout.PREFERRED_SIZE, 114, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );

        jButtonIndex.setMnemonic('i');
        jButtonIndex.setText("Index");
        jButtonIndex.setToolTipText("index the selected json file");
        jButtonIndex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIndexActionPerformed(evt);
            }
        });

        jButtonBrowse.setMnemonic('b');
        jButtonBrowse.setText("Browse");
        jButtonBrowse.setToolTipText("browse for a json file to parse");
        jButtonBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextFieldDataFile)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonBrowse)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonParse, GroupLayout.PREFERRED_SIZE, 61, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonIndex))
                    .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldDataFile, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBrowse)
                    .addComponent(jButtonIndex)
                    .addComponent(jButtonParse))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, GroupLayout.PREFERRED_SIZE, 74, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel4, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(634, 725));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Runs the parser over the selected data file and populates the JListVideo
     * panel with YouTubeVideos.
     *
     */
    private void jButtonParseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonParseActionPerformed
        String dataFile = jTextFieldDataFile.getText();
        clearGUI();
        ytParser = new YouTubeDataParser();
        list = null;

        try {
            // Run the YouTubeParser over the file in the data directory
            ytParser.parse("data" + File.separator + dataFile);
            // Get the ArrayList from the ytParser, and save as a List. 
            list = ytParser.getArray();
            // Populates the resticting set - only videos in this set will be displayed
            vidSet = new HashSet<>();
            vidSet.addAll(list);
            // Catch any of the parsing exceptions
        } catch (YouTubeDataParserException ex) {
            // Prints out a DialogPane with the relevant error message
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }

        if (list != null) {
            // YouTube data has been parsed successfully!
            // connects the data/model to the view
            jListVideo.setModel(model);

            // populates the model from the List obtained from ytParser
            modPop();

            System.out.println("List: " + list.size());
        }
    }//GEN-LAST:event_jButtonParseActionPerformed

    // Set the text fields with the value of the selected YouTubeVideo
    private void jListVideoValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListVideoValueChanged
        if (!jListVideo.getValueIsAdjusting() && !modelOp) {
            int index = jListVideo.getSelectedIndex();
            jTextFieldChannel.setText(model.get(index).getChannelTitle());
            jTextFieldDate.setText(model.get(index).getPublishedAt().substring(0, 10) + " " + model.get(index).getPublishedAt().substring(11, 16));
            jTextFieldTitle.setText(model.get(index).getTitle());
            jTextFieldViewCount.setText(String.valueOf(model.get(index).getViewCount()));
            jTextFieldCommentCount.setText(String.valueOf(model.get(index).getCommentCount()));
            jTextFieldLikeCount.setText(String.valueOf(model.get(index).getLikeCount()));
            jTextFieldDislikeCount.setText(String.valueOf(model.get(index).getDislikeCount()));
            jTextFieldLikeRatio.setText(String.valueOf(model.get(index).getLikeRatio()));
            jTextAreaDescription.setText(model.get(index).getDescription());
        }
    }//GEN-LAST:event_jListVideoValueChanged

    /**
     * Sorts the model by the Channel Title of each video.
     */
    private void jRadioButtonChannelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonChannelActionPerformed
        if (list != null) {
            ytParser.sortByChannelTitle();
            modPop();
        }
    }//GEN-LAST:event_jRadioButtonChannelActionPerformed

    /**
     * Sorts the model by the Date Uploaded each video.
     */
    private void jRadioButtonDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonDateActionPerformed
        if (list != null) {
            ytParser.sortByDate();
            modPop();
        }
    }//GEN-LAST:event_jRadioButtonDateActionPerformed

    /**
     * Sorts the model by the View Count of each video.
     */
    private void jRadioButtonViewsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonViewsActionPerformed
        if (list != null) {
            ytParser.sortByViews();
            modPop();
        }
    }//GEN-LAST:event_jRadioButtonViewsActionPerformed

    /**
     * Sorts the model by the Description Length of each video.
     */
    private void jRadioButtonDescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonDescriptionActionPerformed
        if (list != null) {
            ytParser.sortByDescriptionLength();
            modPop();
        }
    }//GEN-LAST:event_jRadioButtonDescriptionActionPerformed

    /**
     * Runs the Indexer over the Parser and populates the JListTrending panel
     * with WordItems
     */
    private void jButtonIndexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonIndexActionPerformed
        if (list != null) {
            ytIndexer = new YouTubeVideoIndexer();
            trendList = null;

            modelOp = true;
            trendModel.clear();
            modelOp = false;

            try {
                // Run the YouTubeIndexer over the ytParser object
                ytIndexer.index(ytParser);
                // Get the ArrayList from the ytIndexer, and save as a List. 
                trendList = ytIndexer.getSortedWordItems();
                // Catch any of the indexing exceptions
            } catch (YouTubeDataParserException ex) {
                // Prints out a DialogPane with the relevant error message
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }

            if (trendList != null) {
                // ytParser data has been indexed successfully!
                // connects the data/model to the view
                jListTrending.setModel(trendModel);
                modelOp = true;
                // populates the trendModel from the trendList obtained from ytIndexer
                for (int i = 0; i < trendList.size(); i++) {
                    trendModel.addElement(trendList.get(i));
                }
                modelOp = false;
            }
        } else {
            JOptionPane.showMessageDialog(null, "You must Parse a JSON file before Indexing");
        }

    }//GEN-LAST:event_jButtonIndexActionPerformed

    /**
     * Updates the vidSet with all the videos associated with the selected
     * WordItem
     */
    private void jListTrendingValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListTrendingValueChanged
        if (!jListTrending.getValueIsAdjusting() && !modelOp) {
            int index = jListTrending.getSelectedIndex();
            vidSet = trendList.get(index).getPosts();

            // clear text fields
            jTextFieldChannel.setText("");
            jTextFieldDate.setText("");
            jTextFieldTitle.setText("");
            jTextFieldViewCount.setText("");
            jTextFieldCommentCount.setText("");
            jTextFieldLikeCount.setText("");
            jTextFieldDislikeCount.setText("");
            jTextFieldLikeRatio.setText("");
            jTextAreaDescription.setText("");

            // repopulate the videoList. 
            modPop();
        }
    }//GEN-LAST:event_jListTrendingValueChanged

    private void jRadioButtonLikesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonLikesActionPerformed
        if (list != null) {
            ytParser.sortByLikes();
            modPop();
        }
    }//GEN-LAST:event_jRadioButtonLikesActionPerformed

    private void jRadioButtonCommentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonCommentsActionPerformed
        if (list != null) {
            ytParser.sortByComments();
            modPop();
        }
    }//GEN-LAST:event_jRadioButtonCommentsActionPerformed

    private void jRadioButtonTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonTitleActionPerformed
        if (list != null) {
            ytParser.sortByTitle();
            modPop();
        }
    }//GEN-LAST:event_jRadioButtonTitleActionPerformed

    private void jRadioButtonLikeRatioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonLikeRatioActionPerformed
        if (list != null) {
            ytParser.sortByLikeRatio();
            modPop();
        }
    }//GEN-LAST:event_jRadioButtonLikeRatioActionPerformed

    private void jButtonBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseActionPerformed
        int returnVal = jFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooser.getSelectedFile();
            jTextFieldDataFile.setText(file.getName());
            clearGUI();
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_jButtonBrowseActionPerformed

    /**
     * Populates the JListVideo model from an updated List, checking it against
     * the vidSet videos
     */
    private void modPop() {
        modelOp = true;
        model.clear();
        for (int i = 0; i < ytParser.size(); i++) {
            if (vidSet.contains(ytParser.getVideo(i))) {
                model.addElement(ytParser.getVideo(i));
            }
        }
        modelOp = false;
    }

    /**
     * Clears all the fields and models
     *
     */
    private void clearGUI() {
        modelOp = true;
        //clear models
        model.clear();
        trendModel.clear();
        //clear radio button selections
        buttonGroupSort.clearSelection();
        // clear text fields
        jTextFieldChannel.setText("");
        jTextFieldDate.setText("");
        jTextFieldTitle.setText("");
        jTextFieldViewCount.setText("");
        jTextFieldCommentCount.setText("");
        jTextFieldLikeCount.setText("");
        jTextFieldDislikeCount.setText("");
        jTextFieldLikeRatio.setText("");
        jTextAreaDescription.setText("");
        modelOp = false;
    }

    /**
     * Inner class to override the default file filter to only show JSON files
     */
    class jsonFileFilter extends javax.swing.filechooser.FileFilter {

        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".json" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".json");
        }

        @Override
        public String getDescription() {
            // This description will be displayed in the dialog box
            return "JSON files (*.json)";
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            // Set System L&F
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(YouTubeTrenderFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // Set System to always show mnemonic underlines
        UIManager.getLookAndFeelDefaults().put("Button.showMnemonics", true);
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new YouTubeTrenderFrame().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ButtonGroup buttonGroupSort;
    private JButton jButtonBrowse;
    private JButton jButtonIndex;
    private JButton jButtonParse;
    private JFileChooser jFileChooser;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JLabel jLabel7;
    private JLabel jLabel8;
    private JLabel jLabel9;
    private JList jListTrending;
    private JList<YouTubeVideo> jListVideo;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JPanel jPanel3;
    private JPanel jPanel4;
    private JRadioButton jRadioButtonChannel;
    private JRadioButton jRadioButtonComments;
    private JRadioButton jRadioButtonDate;
    private JRadioButton jRadioButtonDescription;
    private JRadioButton jRadioButtonLikeRatio;
    private JRadioButton jRadioButtonLikes;
    private JRadioButton jRadioButtonTitle;
    private JRadioButton jRadioButtonViews;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JScrollPane jScrollPane3;
    private JTextArea jTextAreaDescription;
    private JTextField jTextFieldChannel;
    private JTextField jTextFieldCommentCount;
    private JTextField jTextFieldDataFile;
    private JTextField jTextFieldDate;
    private JTextField jTextFieldDislikeCount;
    private JTextField jTextFieldLikeCount;
    private JTextField jTextFieldLikeRatio;
    private JTextField jTextFieldTitle;
    private JTextField jTextFieldViewCount;
    // End of variables declaration//GEN-END:variables
}
